#!/bin/bash

# Test Script untuk Autoscript Tunneling
# Script untuk memverifikasi instalasi dan status layanan

# Warna untuk output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fungsi logging
print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Fungsi untuk test koneksi port
test_port() {
    local port=$1
    local service=$2
    
    if netstat -tlnp | grep -q ":$port "; then
        print_success "$service listening on port $port"
        return 0
    else
        print_error "$service NOT listening on port $port"
        return 1
    fi
}

# Fungsi untuk test SSH connection
test_ssh_connection() {
    local port=$1
    local timeout=5
    
    print_info "Testing SSH connection on port $port..."
    
    # Test menggunakan nc (netcat)
    if command -v nc >/dev/null 2>&1; then
        if timeout $timeout nc -z localhost $port 2>/dev/null; then
            print_success "Port $port is accessible"
            return 0
        else
            print_error "Port $port is not accessible"
            return 1
        fi
    else
        print_warning "netcat not available, skipping connection test"
        return 1
    fi
}

# Fungsi utama testing
main() {
    clear
    echo "=============================================="
    echo "    AUTOSCRIPT TUNNELING TEST"
    echo "    Verification & Status Check"
    echo "=============================================="
    echo
    
    local test_passed=0
    local test_failed=0
    
    # Test 1: Cek apakah services berjalan
    print_info "Testing service status..."
    echo
    
    if systemctl is-active --quiet ssh; then
        print_success "OpenSSH service is running"
        ((test_passed++))
    else
        print_error "OpenSSH service is not running"
        ((test_failed++))
    fi
    
    if systemctl is-active --quiet dropbear; then
        print_success "Dropbear service is running"
        ((test_passed++))
    else
        print_error "Dropbear service is not running"
        ((test_failed++))
    fi
    
    echo
    
    # Test 2: Cek apakah services enabled untuk auto-start
    print_info "Testing auto-start configuration..."
    echo
    
    if systemctl is-enabled --quiet ssh; then
        print_success "OpenSSH auto-start is enabled"
        ((test_passed++))
    else
        print_error "OpenSSH auto-start is not enabled"
        ((test_failed++))
    fi
    
    if systemctl is-enabled --quiet dropbear; then
        print_success "Dropbear auto-start is enabled"
        ((test_passed++))
    else
        print_error "Dropbear auto-start is not enabled"
        ((test_failed++))
    fi
    
    echo
    
    # Test 3: Cek port yang listening
    print_info "Testing listening ports..."
    echo
    
    # Test OpenSSH ports
    print_info "OpenSSH ports:"
    local ssh_ports_found=0
    for port in 22 80 443 444; do
        if netstat -tlnp | grep sshd | grep -q ":$port "; then
            print_success "  Port $port - OK"
            ((test_passed++))
            ((ssh_ports_found++))
        fi
    done
    
    if [ $ssh_ports_found -eq 0 ]; then
        print_error "No OpenSSH ports found listening"
        ((test_failed++))
    fi
    
    echo
    
    # Test Dropbear ports
    print_info "Dropbear ports:"
    local dropbear_ports_found=0
    for port in 90 143 80 443 8080 8443 9090 9443; do
        if netstat -tlnp | grep dropbear | grep -q ":$port "; then
            print_success "  Port $port - OK"
            ((test_passed++))
            ((dropbear_ports_found++))
        fi
    done
    
    if [ $dropbear_ports_found -eq 0 ]; then
        print_error "No Dropbear ports found listening"
        ((test_failed++))
    fi
    
    echo
    
    # Test 4: Cek konfigurasi files
    print_info "Testing configuration files..."
    echo
    
    if [ -f /etc/ssh/sshd_config ]; then
        if grep -q "Generated by autoscript-tunnel" /etc/ssh/sshd_config; then
            print_success "OpenSSH config file is properly configured"
            ((test_passed++))
        else
            print_warning "OpenSSH config file exists but may not be configured by script"
        fi
    else
        print_error "OpenSSH config file not found"
        ((test_failed++))
    fi
    
    if [ -f /etc/default/dropbear ]; then
        if grep -q "Generated by autoscript-tunnel" /etc/default/dropbear; then
            print_success "Dropbear config file is properly configured"
            ((test_passed++))
        else
            print_warning "Dropbear config file exists but may not be configured by script"
        fi
    else
        print_error "Dropbear config file not found"
        ((test_failed++))
    fi
    
    echo
    
    # Test 5: Cek backup files
    print_info "Testing backup files..."
    echo
    
    if ls /etc/ssh/sshd_config.backup.* >/dev/null 2>&1; then
        print_success "SSH config backup found"
        ((test_passed++))
    else
        print_warning "SSH config backup not found"
    fi
    
    if ls /etc/default/dropbear.backup.* >/dev/null 2>&1; then
        print_success "Dropbear config backup found"
        ((test_passed++))
    else
        print_warning "Dropbear config backup not found"
    fi
    
    echo
    
    # Test 6: Cek uninstall script
    print_info "Testing uninstall script..."
    echo
    
    if [ -f /root/uninstall-tunnel.sh ] && [ -x /root/uninstall-tunnel.sh ]; then
        print_success "Uninstall script is available and executable"
        ((test_passed++))
    else
        print_error "Uninstall script not found or not executable"
        ((test_failed++))
    fi
    
    echo
    
    # Test 7: Connection test (optional)
    if command -v nc >/dev/null 2>&1; then
        print_info "Testing port connectivity..."
        echo
        
        # Test beberapa port yang umum
        local test_ports=($(netstat -tlnp | grep -E "(sshd|dropbear)" | awk '{print $4}' | cut -d: -f2 | head -3))
        
        for port in "${test_ports[@]}"; do
            test_ssh_connection $port
            if [ $? -eq 0 ]; then
                ((test_passed++))
            else
                ((test_failed++))
            fi
        done
        
        echo
    fi
    
    # Ringkasan hasil test
    echo "=============================================="
    echo "    TEST SUMMARY"
    echo "=============================================="
    echo
    
    print_success "Tests Passed: $test_passed"
    if [ $test_failed -gt 0 ]; then
        print_error "Tests Failed: $test_failed"
    else
        print_info "Tests Failed: $test_failed"
    fi
    
    echo
    
    if [ $test_failed -eq 0 ]; then
        print_success "All critical tests passed! Tunnel setup is working correctly."
        echo
        print_info "You can now connect using SSH to the configured ports."
        
        # Tampilkan informasi koneksi
        local server_ip=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || hostname -I | awk '{print $1}')
        if [ -n "$server_ip" ]; then
            echo
            print_info "Connection examples:"
            netstat -tlnp | grep -E "(sshd|dropbear)" | awk '{print $4}' | cut -d: -f2 | sort -n | head -5 | while read port; do
                echo "  ssh root@$server_ip -p $port"
            done
        fi
    else
        print_warning "Some tests failed. Please check the configuration."
        echo
        print_info "You can try running the installation script again:"
        echo "  sudo ./autoscript-tunnel.sh"
    fi
    
    echo
    echo "=============================================="
}

# Install netcat jika belum ada (untuk connection testing)
if ! command -v nc >/dev/null 2>&1; then
    if [[ $EUID -eq 0 ]]; then
        print_info "Installing netcat for connection testing..."
        apt update >/dev/null 2>&1
        apt install -y netcat-openbsd >/dev/null 2>&1
    fi
fi

# Jalankan test
main "$@"