#!/bin/bash

# SSH Installer untuk Autoscript Tunneling
# Script untuk instalasi dan konfigurasi OpenSSH, Dropbear, dan WebSocket ws-epro
# Author: Yuipedia
# Version: 1.0

# Warna untuk output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fungsi logging
print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Fungsi untuk mengecek apakah script dijalankan sebagai root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "Script ini harus dijalankan sebagai root!"
        print_info "Gunakan: sudo bash $0"
        exit 1
    fi
}

# Fungsi untuk mengecek distribusi OS
check_os() {
    print_info "Mengecek sistem operasi..."
    
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VERSION=$VERSION_ID
    else
        print_error "Tidak dapat mendeteksi sistem operasi"
        exit 1
    fi
    
    case $OS in
        "Ubuntu")
            if [[ "$VERSION" == "22.04" ]] || [[ "$VERSION" == "24.04" ]]; then
                print_success "Sistem operasi didukung: $OS $VERSION"
                DISTRO="ubuntu"
            else
                print_error "Versi Ubuntu tidak didukung: $VERSION"
                print_info "Script ini mendukung Ubuntu 22.04 dan 24.04"
                exit 1
            fi
            ;;
        "Debian GNU/Linux")
            if [[ "$VERSION" == "11" ]] || [[ "$VERSION" == "12" ]]; then
                print_success "Sistem operasi didukung: $OS $VERSION"
                DISTRO="debian"
            else
                print_error "Versi Debian tidak didukung: $VERSION"
                print_info "Script ini mendukung Debian 11 dan 12"
                exit 1
            fi
            ;;
        *)
            print_error "Sistem operasi tidak didukung: $OS"
            print_info "Script ini hanya mendukung Debian 11/12 dan Ubuntu 22/24"
            exit 1
            ;;
    esac
}

# Fungsi untuk mengecek apakah port sedang digunakan
check_port() {
    local port=$1
    if netstat -tlnp | grep -q ":$port "; then
        return 0  # Port sedang digunakan
    else
        return 1  # Port tidak digunakan
    fi
}

# Fungsi untuk update sistem
update_system() {
    print_info "Memperbarui sistem..."
    apt update -y
    if [ $? -eq 0 ]; then
        print_success "Sistem berhasil diperbarui"
    else
        print_error "Gagal memperbarui sistem"
        exit 1
    fi
}

# Fungsi untuk install package yang diperlukan
install_packages() {
    print_info "Menginstall package yang diperlukan..."
    
    local packages="openssh-server dropbear-bin net-tools git build-essential"
    
    print_info "Menginstall: $packages"
    apt install -y $packages
    
    if [ $? -eq 0 ]; then
        print_success "Semua package berhasil diinstall"
    else
        print_error "Gagal menginstall beberapa package"
        exit 1
    fi
}

# Fungsi untuk backup konfigurasi
backup_configs() {
    print_info "Membuat backup konfigurasi..."
    
    # Backup SSH config
    if [ -f /etc/ssh/sshd_config ]; then
        cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)
        print_success "Backup SSH config dibuat"
    fi
    
    # Backup Dropbear config
    if [ -f /etc/default/dropbear ]; then
        cp /etc/default/dropbear /etc/default/dropbear.backup.$(date +%Y%m%d_%H%M%S)
        print_success "Backup Dropbear config dibuat"
    fi
}

# Fungsi untuk konfigurasi OpenSSH
configure_openssh() {
    print_info "Mengkonfigurasi OpenSSH..."
    
    # Port yang akan digunakan OpenSSH
    local ssh_ports=(22 80 443 444)
    local available_ssh_ports=()
    
    # Cek port yang tersedia untuk SSH
    for port in "${ssh_ports[@]}"; do
        if ! check_port $port; then
            available_ssh_ports+=($port)
        else
            print_warning "Port $port sudah digunakan, akan diskip untuk OpenSSH"
        fi
    done
    
    if [ ${#available_ssh_ports[@]} -eq 0 ]; then
        print_error "Tidak ada port yang tersedia untuk OpenSSH"
        exit 1
    fi
    
    # Konfigurasi sshd_config
    cat > /etc/ssh/sshd_config << EOF
# OpenSSH Server Configuration
# Generated by Yuipedia Tunneling

# Port configuration
$(printf 'Port %s\n' "${available_ssh_ports[@]}")

# Protocol and encryption
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Authentication
PermitRootLogin yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# Security settings
X11Forwarding yes
PrintMotd no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server

# Connection settings
ClientAliveInterval 60
ClientAliveCountMax 3
MaxAuthTries 3
MaxSessions 10

# Logging
SyslogFacility AUTH
LogLevel INFO
EOF

    print_success "OpenSSH dikonfigurasi untuk port: ${available_ssh_ports[*]}"
    
    # Restart dan enable SSH service
    systemctl restart ssh
    systemctl enable ssh
    
    if systemctl is-active --quiet ssh; then
        print_success "OpenSSH service berhasil diaktifkan"
    else
        print_error "Gagal mengaktifkan OpenSSH service"
        exit 1
    fi
}

# Fungsi untuk konfigurasi Dropbear
configure_dropbear() {
    print_info "Mengkonfigurasi Dropbear..."
    
    # Port yang akan digunakan Dropbear
    local dropbear_ports=(90 143 80 443)
    local available_dropbear_ports=()
    
    # Cek port yang tersedia untuk Dropbear
    for port in "${dropbear_ports[@]}"; do
        if ! check_port $port; then
            available_dropbear_ports+=($port)
        else
            print_warning "Port $port sudah digunakan, akan diskip untuk Dropbear"
        fi
    done
    
    if [ ${#available_dropbear_ports[@]} -eq 0 ]; then
        print_warning "Tidak ada port yang tersedia untuk Dropbear, menggunakan port alternatif"
        # Gunakan port alternatif jika semua port utama tidak tersedia
        local alt_ports=(8080 8443 9090 9443)
        for port in "${alt_ports[@]}"; do
            if ! check_port $port; then
                available_dropbear_ports+=($port)
                break
            fi
        done
    fi
    
    if [ ${#available_dropbear_ports[@]} -eq 0 ]; then
        print_error "Tidak ada port yang tersedia untuk Dropbear"
        exit 1
    fi
    
    # Stop dropbear service jika sedang berjalan
    systemctl stop dropbear 2>/dev/null
    
    # Konfigurasi Dropbear
    cat > /etc/default/dropbear << EOF
# Dropbear SSH server configuration
# Generated by autoscript-tunnel

# Set to NO_START=0 to enable dropbear
NO_START=0

# Port configuration - menggunakan port yang tersedia
DROPBEAR_PORT="${available_dropbear_ports[0]}"

# Additional ports
$(for i in "${!available_dropbear_ports[@]}"; do
    if [ $i -gt 0 ]; then
        echo "DROPBEAR_EXTRA_ARGS=\"\$DROPBEAR_EXTRA_ARGS -p ${available_dropbear_ports[$i]}\""
    fi
done)

# Security options
DROPBEAR_EXTRA_ARGS="\$DROPBEAR_EXTRA_ARGS -w"

# Receive window size
DROPBEAR_RECEIVE_WINDOW=65536
EOF

    print_success "Dropbear dikonfigurasi untuk port: ${available_dropbear_ports[*]}"
    
    # Generate host keys jika belum ada
    if [ ! -f /etc/dropbear/dropbear_rsa_host_key ]; then
        print_info "Membuat Dropbear host keys..."
        dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
        dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key
        dropbearkey -t ecdsa -f /etc/dropbear/dropbear_ecdsa_host_key
        print_success "Dropbear host keys berhasil dibuat"
    fi
    
    # Restart dan enable Dropbear service
    systemctl restart dropbear
    systemctl enable dropbear
    
    if systemctl is-active --quiet dropbear; then
        print_success "Dropbear service berhasil diaktifkan"
    else
        print_error "Gagal mengaktifkan Dropbear service"
        exit 1
    fi
}

# Fungsi untuk install dan konfigurasi ws-epro WebSocket
install_ws_epro() {
    print_info "Menginstall ws-epro WebSocket proxy..."
    
    # Buat direktori untuk ws-epro
    mkdir -p /usr/local/bin
    mkdir -p /etc/ws-epro
    
    # Download dan compile ws-epro
    cd /tmp
    git clone https://github.com/eritikguy/ws-epro.git
    cd ws-epro
    
    # Compile ws-epro
    make
    if [ $? -eq 0 ]; then
        cp ws-epro /usr/local/bin/
        chmod +x /usr/local/bin/ws-epro
        print_success "ws-epro berhasil diinstall"
    else
        print_error "Gagal mengcompile ws-epro"
        exit 1
    fi
    
    # Konfigurasi ws-epro
    cat > /etc/ws-epro/tunws.conf << EOF
verbose: 0
listen:

- target_host: 127.0.0.1
  target_port: 22
  listen_port: 8080

- target_host: 127.0.0.1
  target_port: 90
  listen_port: 8081

- target_host: 127.0.0.1
  target_port: 80
  listen_port: 8082

- target_host: 127.0.0.1
  target_port: 443
  listen_port: 8083
EOF

    print_success "Konfigurasi ws-epro dibuat"
    
    # Buat service untuk ws-epro
    cat > /etc/systemd/system/ws-epro.service << EOF
[Unit]
Description=ws-epro WebSocket Proxy
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/ws-epro -f /etc/ws-epro/tunws.conf
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

    # Enable dan start ws-epro service
    systemctl daemon-reload
    systemctl enable ws-epro
    systemctl start ws-epro
    
    if systemctl is-active --quiet ws-epro; then
        print_success "ws-epro service berhasil diaktifkan"
    else
        print_error "Gagal mengaktifkan ws-epro service"
        exit 1
    fi
    
    # Cleanup
    cd /
    rm -rf /tmp/ws-epro
}

# Fungsi untuk konfigurasi firewall (opsional)
configure_firewall() {
    print_info "Mengecek status firewall..."
    
    if command -v ufw >/dev/null 2>&1; then
        if ufw status | grep -q "Status: active"; then
            print_info "UFW firewall aktif, menambahkan rules..."
            
            # Allow SSH ports
            ufw allow 22/tcp
            ufw allow 80/tcp
            ufw allow 443/tcp
            ufw allow 444/tcp
            ufw allow 90/tcp
            ufw allow 143/tcp
            ufw allow 8080/tcp
            ufw allow 8081/tcp
            ufw allow 8082/tcp
            ufw allow 8083/tcp
            ufw allow 8080/tcp
            ufw allow 8443/tcp
            ufw allow 9090/tcp
            ufw allow 9443/tcp
            
            print_success "Firewall rules ditambahkan"
        else
            print_info "UFW firewall tidak aktif, skip konfigurasi firewall"
        fi
    else
        print_info "UFW tidak terinstall, skip konfigurasi firewall"
    fi
}

# Fungsi untuk menampilkan status layanan
show_service_status() {
    print_info "Status layanan:"
    echo
    
    # Status OpenSSH
    if systemctl is-active --quiet ssh; then
        print_success "OpenSSH: AKTIF"
        print_info "Port OpenSSH yang digunakan:"
        netstat -tlnp | grep sshd | awk '{print $4}' | cut -d: -f2 | sort -n | while read port; do
            echo "  - Port $port"
        done
    else
        print_error "OpenSSH: TIDAK AKTIF"
    fi
    
    echo
    
    # Status Dropbear
    if systemctl is-active --quiet dropbear; then
        print_success "Dropbear: AKTIF"
        print_info "Port Dropbear yang digunakan:"
        netstat -tlnp | grep dropbear | awk '{print $4}' | cut -d: -f2 | sort -n | while read port; do
            echo "  - Port $port"
        done
    else
        print_error "Dropbear: TIDAK AKTIF"
    fi
    
    echo
    
    # Status ws-epro
    if systemctl is-active --quiet ws-epro; then
        print_success "ws-epro WebSocket: AKTIF"
        print_info "Port WebSocket yang digunakan:"
        netstat -tlnp | grep ws-epro | awk '{print $4}' | cut -d: -f2 | sort -n | while read port; do
            echo "  - Port $port"
        done
    else
        print_error "ws-epro WebSocket: TIDAK AKTIF"
    fi
    
    echo
}

# Fungsi untuk menampilkan informasi koneksi
show_connection_info() {
    print_info "Informasi koneksi:"
    echo
    
    # Dapatkan IP server
    local server_ip=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || hostname -I | awk '{print $1}')
    
    if [ -n "$server_ip" ]; then
        print_success "IP Server: $server_ip"
        echo
        
        print_info "Contoh koneksi SSH:"
        if systemctl is-active --quiet ssh; then
            netstat -tlnp | grep sshd | awk '{print $4}' | cut -d: -f2 | sort -n | head -3 | while read port; do
                echo "  ssh root@$server_ip -p $port"
            done
        fi
        
        echo
        
        print_info "Contoh koneksi Dropbear:"
        if systemctl is-active --quiet dropbear; then
            netstat -tlnp | grep dropbear | awk '{print $4}' | cut -d: -f2 | sort -n | head -3 | while read port; do
                echo "  ssh root@$server_ip -p $port"
            done
        fi
        
        echo
        
        print_info "Contoh koneksi WebSocket untuk HTTP Injector:"
        if systemctl is-active --quiet ws-epro; then
            echo "  ws://$server_ip:8080 (SSH via WebSocket)"
            echo "  ws://$server_ip:8081 (Dropbear via WebSocket)"
            echo "  ws://$server_ip:8082 (SSH port 80 via WebSocket)"
            echo "  ws://$server_ip:8083 (SSH port 443 via WebSocket)"
        fi
        
        echo
        print_info "Payload untuk HTTP Injector:"
        echo "  GET / HTTP/1.1[crlf]Host: [host][crlf]Connection: Upgrade[crlf]User-Agent: [ua][crlf]Upgrade: websocket[crlf][crlf]"
        echo
    else
        print_warning "Tidak dapat mendeteksi IP server"
    fi
    
    echo
}

# Fungsi untuk membuat script uninstall
create_uninstall_script() {
    print_info "Membuat script uninstall..."
    
    cat > /root/uninstall-tunnel.sh << 'EOF'
#!/bin/bash

# Script untuk uninstall Yuipedia Tunneling
echo "Menghapus konfigurasi tunnel..."

# Stop services
systemctl stop ssh dropbear ws-epro

# Restore backup configs
if [ -f /etc/ssh/sshd_config.backup.* ]; then
    latest_backup=$(ls -t /etc/ssh/sshd_config.backup.* | head -1)
    cp "$latest_backup" /etc/ssh/sshd_config
    echo "SSH config dikembalikan dari backup"
fi

if [ -f /etc/default/dropbear.backup.* ]; then
    latest_backup=$(ls -t /etc/default/dropbear.backup.* | head -1)
    cp "$latest_backup" /etc/default/dropbear
    echo "Dropbear config dikembalikan dari backup"
fi

# Remove ws-epro
rm -f /usr/local/bin/ws-epro
rm -rf /etc/ws-epro
systemctl disable ws-epro
rm -f /etc/systemd/system/ws-epro.service
systemctl daemon-reload

# Restart services
systemctl restart ssh
systemctl restart dropbear

echo "Uninstall selesai. Konfigurasi telah dikembalikan ke pengaturan sebelumnya."
EOF

    chmod +x /root/uninstall-tunnel.sh
    print_success "Script uninstall dibuat di /root/uninstall-tunnel.sh"
}

# Fungsi utama
main() {
    clear
    echo "=============================================="
    echo "    SSH TUNNELING INSTALLER"
    echo "    Debian 11/12 & Ubuntu 22/24"
    echo "=============================================="
    echo
    
    # Cek apakah script dijalankan sebagai root
    check_root
    
    # Cek sistem operasi
    check_os
    
    # Update sistem
    update_system
    
    # Install package
    install_packages
    
    # Backup konfigurasi
    backup_configs
    
    # Konfigurasi OpenSSH
    configure_openssh
    
    # Konfigurasi Dropbear
    configure_dropbear
    
    # Install dan konfigurasi ws-epro
    install_ws_epro
    
    # Konfigurasi firewall
    configure_firewall
    
    # Tunggu sebentar untuk service fully started
    sleep 3
    
    # Tampilkan status
    show_service_status
    
    # Tampilkan info koneksi
    show_connection_info
    
    # Buat script uninstall
    create_uninstall_script
    
    echo
    print_success "=============================================="
    print_success "    INSTALASI SSH SELESAI!"
    print_success "=============================================="
    echo
    print_info "Catatan:"
    echo "- Semua layanan telah dikonfigurasi untuk auto-start saat boot"
    echo "- WebSocket proxy (ws-epro) siap untuk HTTP Injector"
    echo "- Script uninstall tersedia di /root/uninstall-tunnel.sh"
    echo "- Backup konfigurasi disimpan dengan timestamp"
    echo
    print_success "Server tunneling siap digunakan!"
}

# Jalankan fungsi utama
main "$@"