#!/bin/bash

# Quick Install Script untuk Autoscript Tunneling
# Script untuk download dan install autoscript tunneling
# Quick Install Command: apt update -y && apt install -y curl jq wget screen build-essential && curl -sSfL https://raw.githubusercontent.com/xenvoid404/autoscript-tunneling/master/install -o install && chmod +x install && screen -S yuipedia ./install
# Jika VPS Terputus ketika sedang menginstall, masuk kembali dan jalankan command: screen -r yuipedia

# Warna untuk output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fungsi logging
print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Konfigurasi Github
GITHUB_RAW="https://raw.githubusercontent.com"
GITHUB_USER="xenvoid404"
GITHUB_REPO="autoscript-tunneling"
GITHUB_REPO_BRANCH="master"
GITHUB_RAW_REPO="${GITHUB_RAW}/${GITHUB_USER}/${GITHUB_REPO}/${GITHUB_REPO_BRANCH}"

# Konfigurasi Cloudflare
CF_EMAIL="bodoaraimu@gmail.com"
CF_API="2fd2aaa4b4f93a167dfbfa9e0fb1db461b2cd"
CF_ZONE="12547556cdac33b9b581059255ee574f"

# Informasi VPS
IP=$(curl -s ifconfig.me)
touch /etc/domain

# Fungsi untuk mengecek apakah script dijalankan sebagai root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "Script ini harus dijalankan sebagai root!"
        rm -- "$0"
        exit 1
    fi
}

# Fungsi untuk mengecek virtualisasi
check_virt() {
    if [[ "$(systemd-detect-virt 2>/dev/null)" == "openvz" ]] || grep -q openvz /proc/user_beancounters; then
        echo "ERROR: OpenVZ tidak didukung"
        rm -rf -- "$0"
        exit 1
    fi
}

# Fungsi untuk mengecek koneksi internet
check_internet() {
    print_info "Mengecek koneksi internet..."
    
    if ping -c 1 google.com >/dev/null || ping -c 1 8.8.8.8 >/dev/null; then
        print_success "Koneksi internet tersedia"
        return 0
    else
        print_error "Tidak ada koneksi internet"
        print_info "Pastikan server terhubung ke internet untuk download script"
        rm -- "$0"
        return 1
    fi
}

# Fungsi untuk mengecek distribusi OS
check_os() {
    print_info "Mengecek sistem operasi..."
    
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$ID
        VERSION=$VERSION_ID
        VERSION_MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
    else
        print_error "Operating System tidak terdeteksi"
        rm -rf -- "$0"
        exit 1
    fi

    case "$OS" in
        "ubuntu")
            if [[ "$VERSION_MAJOR" -ge 22 ]]; then
                print_success "Sistem operasi didukung: Ubuntu $VERSION"
            else
                print_error "Versi Ubuntu tidak didukung! Minimal Ubuntu 22+"
                rm -rf -- "$0"
                exit 1
            fi
            ;;
        "debian")
            if [[ "$VERSION_MAJOR" -ge 11 ]]; then
                print_success "Sistem operasi didukung: Debian $VERSION"
            else
                print_error "Versi Debian tidak didukung! Minimal Debian 11+"
                rm -rf -- "$0"
                exit 1
            fi
            ;;
        *)
            print_error "Sistem operasi tidak didukung: $OS"
            print_info "Script ini hanya untuk Ubuntu 22+ dan Debian 11+"
            rm -rf -- "$0"
            exit 1
            ;;
    esac
}

# First Setup Installation
first_setup() {
    print_info "Setup Environment for First Installation..."
    sleep 2
    
    # Set Timezone
    timedatectl set-timezone Asia/Jakarta
    # Setup sshd_config
    curl -sSfL "${GITHUB_RAW_REPO}/ssh/sshd_config" -o /etc/ssh/sshd_config && chmod 644 /etc/ssh/sshd_config
    # Setup common-password
    curl -sSfL "${GITHUB_RAW_REPO}/ssh/common-password" -o /etc/pam.d/common-password && chmod 644 /etc/pam.d/common-password
    # Setup Banner Ssh
    curl -sSfL "${GITHUB_RAW_REPO}/ssh/banner.com" -o /etc/banner.com && chmod 600 /etc/banner.com
    # Setup Neofetch
    curl -sSfL "${GITHUB_RAW_REPO}/bin/neofetch" -o /usr/local/bin/neofetch && chmod +x /usr/local/bin/neofetch
    cat > /root/.profile <<-END
~/.profile: executed by Bourne-compatible login shells.
if [ "\$BASH" ]; then
    if [ -f ~/.bashrc ]; then
        . ~/.bashrc
    fi
fi

mesg n || true
ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
neofetch
\$WEB_SERVER
END

    # Setup iptables
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
}

# Setup Dependencies
setup_dependencies() {
    apt remove --purge -y man-db apache2 ufw exim4 firewalld snapd*
    clear
    print_info "INSTALLING REQUIRED DEPENDENCIES..."
    sleep 2
    # Disable IPV6
    sysctl -w net.ipv6.conf.all.disable_ipv6=1 >/dev/null 2>&1
    sysctl -w net.ipv6.conf.default.disable_ipv6=1  >/dev/null 2>&1
    apt install software-properties-common -y
    apt update && apt upgrade -y
    apt install -y nginx zip unzip pwgen openssl netcat bash-completion  \
    socat xz-utils apt-transport-https dnsutils socat \
    tar ruby p7zip-full python3-pip haproxy libc6  \
    msmtp-mta ca-certificates bsd-mailx iptables iptables-persistent netfilter-persistent \
    net-tools openvpn easy-rsa python3-certbot-nginx p7zip-full tuned fail2ban
    apt autoremove -y
    apt clean
    
    print_success "REQUIRED DEPENDENCIES INSTALLED SUCCESSFULLY"
}

# Buat random string untuk subdomain
generate_random_string() {
    LENGTH=4
    CHAR_SET="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    RAND_STRING=$(LC_CTYPE=C tr -dc "$CHAR_SET" < /dev/urandom | head -c "$LENGTH")
    echo "$RAND_STRING"
}

# Tanya apakah user punya domain yang sudah di pointing ke ip vps
ask_domain() {
    while true; do
        read -rp "Do you have a Domain? (y/n): " ANS
        case "$ANS" in
            y|Y)
                check_domain
                break
                ;;
            *)
                print_info "It's okay, we'll set up a free domain for you."
                sleep 2
                request_domain
                break
                ;;
        esac
    done
}

# Cek domain apakah mengarah ke ip vps
check_domain() {
    clear
    read -rp "${YELLOW}Enter Domain Name: " DOMAIN
    IP_DOMAIN=$(host -t A $DOMAIN | awk '{print $4}')
    if [[ "$IP_DOMAIN" != "$IP" ]]; then
        print_error "Domain name not verified or A record is not published."
        rm -rf -- "$0"
        sleep 2
        exit 1
    else
        clear
        sleep 2
        print_success "Domain added successfully"
        echo "$DOMAIN" > /etc/domain
        export DOMAIN=$DOMAIN
        sleep 1
        clear
    fi
}

# Added domain to Cloudflare
request_domain() {
    clear
    print_info "Request new domain for ${IP}"
    SUBDOMAIN=$(generate_random_string)
    RETRY=0
    MAX_RETRY=3
    while [ "$RETRY" -lt "$MAX_RETRY" ]; do
        # Add the subdomain to Cloudflare 
        RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE}/dns_records" \
        -H "X-Auth-Email: ${CF_EMAIL}" \
        -H "X-Auth-Key: ${CF_API}" \
        -H "Content-Type: application/json" \
        --data '{
        "type": "A",
        "name": "'"${SUBDOMAIN}"'",
        "content": "'"${IP}"'",
        "ttl": 1,
        "proxied": false
        }')
        
        # Cek response from Cloudflare
        STATUS=$(echo "$RESPONSE" | jq -r '.success')
        if [[ "$STATUS" == 'true' ]]; then
            print_success "Added domain for your vps success!"
            sleep 2
            echo "$DOMAIN" > /etc/domain
            export DOMAIN=$DOMAIN
            print_info "Domain anda: $DOMAIN"
            sleep 2
            break
        else
            print_error "Add subdomain to Cloudflare failed. Retrying..."
            sleep 2
            RETRY=$((RETRY + 1))
            clear
        fi
    done
    
    if [[ "$RETRY" -eq "$MAX_RETRY" ]]; then
        print_error "Max retry reached, failed add subdomain to cloudflare."
        sleep 2
    fi
}

# Fungsi utama
main() {
    check_root
    check_virt
    check_internet
    check_os
    first_setup
    setup_dependencies
    ask_domain
    curl -sS "${GITHUB_RAW_REPO}/installer/certificate" -o certificate && chmod +x certificate && ./certificate
    curl -sS "${GITHUB_RAW_REPO}/installer/xray-core" -o xray-core && chmod +x xray-core && ./xray-core
    curl -sS "${GITHUB_RAW_REPO}/installer/openvpn" -o openvpn && chmod +x openvpn && ./openvpn
    curl -sS "${GITHUB_RAW_REPO}/installer/ssh-vpn" && chmod +x ssh-vpn && ./ssh-vpn
    
    echo
    print_success "=============================================="
    print_success "          QUICK INSTALL SELESAI!"
    print_success "=============================================="
    echo
}

# Jalankan fungsi utama
main "$@"